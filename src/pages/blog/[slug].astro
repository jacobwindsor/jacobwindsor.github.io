---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from 'astro:content';
import { format } from 'date-fns';
import { marked } from 'marked';

export async function getStaticPaths() {
  const blogPosts = await getCollection('blog', ({ data }) => {
    return import.meta.env.PROD ? !data.draft : true;
  });

  return blogPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;

// Process markdown content
const html = marked(post.body);
---

<BaseLayout
  title={`${post.data.title} - Jacob Windsor`}
  description={post.data.description}
  image={post.data.image}
  url={`/blog/${post.slug}/`}
  type="article"
>
  <main class="min-h-screen py-20 px-6 lg:px-8 bg-background">
    <article class="container mx-auto max-w-4xl">
      <header class="mb-12">
        <h1 class="text-4xl lg:text-5xl font-semibold mb-6 text-foreground tracking-tight">
          {post.data.title}
        </h1>
        
        {post.data.image && (
          <img
            src={post.data.image}
            alt={post.data.title}
            class="w-full rounded-md mb-8 border border-border/50"
          />
        )}

        <div class="flex flex-wrap items-center gap-4 text-sm text-muted-foreground mb-8 pb-8 border-b border-border/50">
          <time datetime={post.data.pubDate.toISOString()}>
            {format(post.data.pubDate, 'MMMM d, yyyy')}
          </time>
          <span>·</span>
          <span>{post.data.author}</span>
          {post.data.tags.length > 0 && (
            <>
              <span>·</span>
              <div class="flex gap-2 flex-wrap">
                {post.data.tags.map((tag) => (
                  <span class="px-2 py-1 rounded bg-muted text-muted-foreground">
                    {tag}
                  </span>
                ))}
              </div>
            </>
          )}
        </div>

        {post.data.description && (
          <p class="text-lg text-muted-foreground mb-8 font-light">
            {post.data.description}
          </p>
        )}
      </header>

      <div class="prose prose-invert prose-lg max-w-none">
        <Fragment set:html={html} />
      </div>

      <footer class="mt-16 pt-8 border-t border-border/50">
        <a
          href="/blog/"
          class="text-primary hover:underline text-sm font-medium inline-flex items-center gap-2"
        >
          ← Back to Blog
        </a>
      </footer>
    </article>
  </main>
</BaseLayout>

<style>
  .prose {
    color: hsl(var(--muted-foreground));
  }
  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    color: hsl(var(--foreground));
    font-weight: 600;
    margin-top: 2em;
    margin-bottom: 1em;
  }
  .prose h1 {
    font-size: 2.25em;
  }
  .prose h2 {
    font-size: 1.875em;
  }
  .prose h3 {
    font-size: 1.5em;
  }
  .prose p {
    margin-bottom: 1.25em;
    line-height: 1.75;
  }
  .prose a {
    color: hsl(var(--primary));
    text-decoration: underline;
  }
  .prose a:hover {
    color: hsl(var(--primary) / 0.8);
  }
  .prose code {
    background-color: hsl(var(--muted));
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  .prose pre {
    background-color: hsl(var(--muted));
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin-bottom: 1.25em;
  }
  .prose pre code {
    background-color: transparent;
    padding: 0;
  }
  .prose ul,
  .prose ol {
    margin-bottom: 1.25em;
    padding-left: 1.625em;
  }
  .prose li {
    margin-bottom: 0.5em;
  }
  .prose blockquote {
    border-left: 4px solid hsl(var(--border));
    padding-left: 1em;
    margin-left: 0;
    margin-right: 0;
    font-style: italic;
    color: hsl(var(--muted-foreground));
  }
  .prose img {
    border-radius: 0.5rem;
    margin-top: 2em;
    margin-bottom: 2em;
  }
</style>
